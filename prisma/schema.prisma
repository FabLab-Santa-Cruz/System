// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  //imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  VOLUNTEER
  ADMIN
  GUEST
}

model BannedEmails {
  id         String   @id @default(cuid())
  email      String   @unique
  reason     String?
  created_at DateTime @default(now())

  @@index([email])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  userType      UserType  @default(GUEST)
  accounts      Account[]
  sessions      Session[]
  last_login    DateTime?
  person_id     String    @unique
  person        Persons   @relation(fields: [person_id], references: [id])

  volunteer_applications VolunteerApplication[] @relation(name: "UserVolunteerApplications")
  volunteers_approved    VolunteerApplication[] @relation(name: "UserVolunteersApproved")

  volunteer Volunteers?

  @@index([userType])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Own models.
//AKA marca
model Brand {
  id        String      @id @default(cuid())
  name      String
  image     String? //Might have a logo
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  inventory Inventory[]
  machines  Machines[]
}

//AKA Categorias
model Category {
  id    String  @id @default(cuid())
  name  String
  image String? //Might have an image
  icon  String? //Might have an icon

  parentId  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  parent    Category?   @relation("Category", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children  Category[]  @relation("Category")
  inventory Inventory[]
}

enum InventoryStatus {
  AVAILABLE
  OUT_OF_STOCK
}

//AKA Inventario
model Inventory {
  id                   String          @id @default(cuid())
  name                 String
  availability         InventoryStatus @default(AVAILABLE)
  principalImage       String?
  images               Files[]         @relation(name: "InventoryImages")
  files                Files[]         @relation(name: "InventoryFiles")
  comercialDescription String?
  comercialResume      String?
  //Tiny description of the model product
  label                String?
  //What comes in the box
  pieces               Json?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  categoryId           String
  brandId              String

  providers Provider[]

  category Category @relation(fields: [categoryId], references: [id])
  brand    Brand    @relation(fields: [brandId], references: [id])
}

model BiometricPosts {
  id          String        @id @default(cuid())
  who_id      String
  date        DateTime
  who         Volunteers    @relation(fields: [who_id], references: [biometric_id], onDelete: NoAction, onUpdate: NoAction)
  WeatherLogs WeatherLogs[]
}

//check https://www.weatherapi.com/docs/
model AirQualityWeather {
  id             String @id @default(cuid())
  weather_log_id String

  carbon_monoxide        Float?
  ozone                  Float?
  nitrogen_dioxide       Float?
  sulfur_dioxide         Float?
  particulate_matter_10  Float?
  particulate_matter_25  Float?
  particulate_matter_100 Float?
  ///   	US - EPA standard.
  /// 1 means Good
  /// 2 means Moderate
  /// 3 means Unhealthy for sensitive group
  /// 4 means Unhealthy
  /// 5 means Very Unhealthy
  /// 6 means Hazardous
  us_epa_index           Int?
  gb_defra_index         Int?

  weather_logs WeatherLogs @relation(fields: [weather_log_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model WeatherLogs {
  id                  String              @id @default(cuid())
  biometric_post_id   String
  temperature_c       Float
  wind_dir            String
  humidity            Float
  precipitation_mm    Float
  cloud               Int
  wind_speed_kmh      Float
  pressure            Float
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  biometric_post      BiometricPosts      @relation(fields: [biometric_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  air_quality_weather AirQualityWeather[]
}

model Skills {
  id         Int          @id @default(autoincrement())
  name       String
  volunteers Volunteers[]
}

///Where they came from? univerisity, company, etc
model Procedence {
  id   String @id @default(cuid())
  name String

  volunteers Volunteers[]
}

model Genders {
  id      String    @id @default(cuid())
  name    String
  persons Persons[]
}

enum VolunteerStatus {
  ACTIVE
  INACTIVE
}

model Volunteers {
  id                     String                @id @default(cuid())
  ///Recomended to use the CI of the person
  biometric_id           String?               @unique
  // person_id              String?               @unique
  // person                 Persons?              @relation(fields: [person_id], references: [id])
  user_id                String                @unique
  user                   User                  @relation(fields: [user_id], references: [id])
  skills                 Skills[]
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  status                 VolunteerStatus       @default(ACTIVE)
  biometric_posts        BiometricPosts[]
  procedence             Procedence[]
  projects               Projects[]
  project_tasks          ProjectTasks[]
  micro_tasks            MicroTasks[]
  project_tasks_comments ProjectTaskComments[]
  tracking_dates         TrackingDates[]
  machine_mainteneance   MachineMaintenance[]
}

model Persons {
  id         String          @id @default(cuid())
  name       String
  f_lastname String? ///Father lastname
  m_lastname String? ///Mother lastname
  ci         String?
  emails     EmailsPersons[]
  phones     PhonesPersons[]
  birthdate  DateTime?
  gender_id  String?
  gender     Genders?        @relation(fields: [gender_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  images    Files[]
  providers Provider[]

  created_at DateTime  @default(now())
  deleted_at DateTime?
  updated_at DateTime  @updatedAt
  user       User?

  @@index([name, f_lastname, m_lastname, ci, deleted_at])
}

model Files {
  id               String         @id @default(cuid())
  key              String
  metadata         Json?
  persons_files    Persons[]
  projects_files   Projects[]     @relation(name: "ProjectFiles")
  projects_images  Projects[]     @relation(name: "ProjectImages")
  inventory_files  Inventory[]    @relation(name: "InventoryFiles")
  inventory_images Inventory[]    @relation(name: "InventoryImages")
  project_tasks    ProjectTasks[]
  micro_tasks      MicroTasks[]
  machine_files    Machines[]
}

model PhonesPersons {
  id        String   @id @default(cuid())
  phone     String
  person_id String
  Person    Persons? @relation(fields: [person_id], references: [id])
}

model EmailsPersons {
  id         String   @id @default(cuid())
  mail       String
  person_id  String
  deleteable Boolean  @default(true)
  Person     Persons? @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Provider {
  id        String      @id @default(cuid())
  name      String
  person_id String?
  person    Persons?    @relation(fields: [person_id], references: [id])
  inventory Inventory[]
}

enum Status {
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ApplicationStatus {
  PENDING
  REJECTED
  ACCEPTED
  ENDED
}

model VolunteerApplication {
  id             String            @id @default(cuid())
  message        String            @db.Text
  status         ApplicationStatus @default(PENDING)
  user_id        String
  applicant      User              @relation(fields: [user_id], references: [id], name: "UserVolunteerApplications")
  approved_by_id String?
  approved_by    User?             @relation(fields: [approved_by_id], references: [id], name: "UserVolunteersApproved", onDelete: SetNull, onUpdate: NoAction)
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt

  @@index([user_id, approved_by_id])
}

model Projects {
  id            String          @id @default(cuid())
  name          String
  files         Files[]         @relation(name: "ProjectFiles")
  images        Files[]         @relation(name: "ProjectImages")
  status        Status          @default(IN_PROGRESS)
  workers       Volunteers[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  project_dates ProjectsDates[]
}

model ProjectsDates {
  id            String        @id @default(cuid())
  project_id    String
  project       Projects      @relation(fields: [project_id], references: [id])
  tracking_id   String
  tracking_date TrackingDates @relation(fields: [tracking_id], references: [id])
  active        Boolean       @default(true)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model TrackingDates {
  id                 String              @id @default(cuid())
  start_date         DateTime
  end_date           DateTime
  volunteer_id       String
  created_by         Volunteers          @relation(fields: [volunteer_id], references: [id])
  project_dates      ProjectsDates[]
  project_task_dates ProjectsTaskDates[]
  micro_task_dates   MicroTaskDates[]
}

model ProjectTasks {
  id          String       @id @default(cuid())
  name        String
  description String?
  files       Files[]
  assigned_to Volunteers[]

  priority Int    @default(0) @db.SmallInt
  status   Status @default(IN_PROGRESS)

  comments           ProjectTaskComments[]
  project_task_dates ProjectsTaskDates[]
}

model ProjectsTaskDates {
  id              String        @id @default(cuid())
  project_task_id String
  project_task    ProjectTasks  @relation(fields: [project_task_id], references: [id])
  tracking_id     String
  tracking_date   TrackingDates @relation(fields: [tracking_id], references: [id])
  active          Boolean       @default(true)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model ProjectTaskComments {
  id              String        @id @default(cuid())
  volunteer_id    String
  volunteer       Volunteers    @relation(fields: [volunteer_id], references: [id])
  said_at         DateTime
  said            String        @db.Text
  project_task    ProjectTasks? @relation(fields: [project_task_id], references: [id])
  project_task_id String?
}

model MicroTasks {
  id    String  @id @default(cuid())
  name  String
  files Files[]

  is_completed            Boolean                  @default(false)
  assigned_to             Volunteers[]
  description             String?
  task_comment            String?
  micro_task_dates        MicroTaskDates[]
  machine_usage_microtask MachineUsageMicroTasks[]
}

model MicroTaskDates {
  id            String        @id @default(cuid())
  micro_task_id String
  micro_task    MicroTasks    @relation(fields: [micro_task_id], references: [id])
  tracking_id   String
  tracking_date TrackingDates @relation(fields: [tracking_id], references: [id])
  active        Boolean       @default(true)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

enum MachineStatus {
  IN_USE
  NOT_IN_USE
  IN_REPAIR //When it was damaged
  IN_MAINTENANCE //Scheduled
}

model MachineUsageMicroTasks {
  id            String     @id @default(cuid())
  machine_id    String
  machine       Machines   @relation(fields: [machine_id], references: [id])
  micro_task    MicroTasks @relation(fields: [micro_task_id], references: [id])
  micro_task_id String
}

///Maquinas usables del fablab, puede ser una impresora 3d, puede ser otra maquina.
model Machines {
  id                      String                   @id @default(cuid())
  name                    String
  description             String?
  status                  MachineStatus            @default(NOT_IN_USE)
  image                   String?
  ///Manuales, cosas asi
  files                   Files[]
  brand                   Brand                    @relation(fields: [brand_id], references: [id])
  brand_id                String
  machine_usage_microtask MachineUsageMicroTasks[]
  machine_mainteneance    MachineMaintenance[]
}

model MachineMaintenance {
  id            String        @id @default(cuid())
  machine_id    String
  machine       Machines      @relation(fields: [machine_id], references: [id])
  description   String
  status        MachineStatus
  start_date    DateTime
  end_date      DateTime
  created_by_id String
  created_by    Volunteers    @relation(fields: [created_by_id], references: [id])
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}
